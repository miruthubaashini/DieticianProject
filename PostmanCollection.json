{
	"info": {
		"_postman_id": "5e9afe10-b794-4e25-aa90-157c240c5c81",
		"name": "Miruthu",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37321121",
		"_collection_link": "https://posthackfest.postman.co/workspace/PostHackfest-Workspace~37f35592-9b0b-4b81-826c-bcc9c009f23b/collection/37321121-5e9afe10-b794-4e25-aa90-157c240c5c81?action=share&source=collection_link&creator=37321121"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Admintoken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"//-------------------------------------------\r",
									"// status code validation\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    res = JSON.parse(responseBody)\r",
									"value = res.token\r",
									"console.log(value)\r",
									"pm.collectionVariables.set(\"Admintoken\", value);\r",
									"      \r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    res = JSON.parse(responseBody)\r",
									"value = res.token\r",
									"console.log(value)\r",
									"pm.collectionVariables.set(\"Admintoken\", value);\r",
									"\r",
									"pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"{ pm.response.to.have.jsonSchema(Schema); \r",
									"});\r",
									"\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"logout\");\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"\r",
									"});}\r",
									"pm.execution.setNextRequest(\"logout\");\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"logout\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"    \r",
									"});}\r",
									"pm.execution.setNextRequest(\"logout\");\r",
									"}\r",
									"//------------------------------------------------------------\r",
									"\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DietURL}}/login",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "create a dietitian",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"loginPassword\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Firstname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Lastname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalStreet\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalCity\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalPincode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Education\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"loginPassword\",",
									"    \"Firstname\",",
									"    \"Lastname\",",
									"    \"ContactNumber\",",
									"    \"DateOfBirth\",",
									"    \"Email\",",
									"    \"HospitalName\",",
									"    \"HospitalStreet\",",
									"    \"HospitalCity\",",
									"    \"HospitalPincode\",",
									"    \"Education\"",
									"  ]",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();    ",
									" if (pm.response.code === 201) {",
									"    pm.test(\"Verify the expected status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"        pm.collectionVariables.set(\"Dietician_Email\", jsonData.Email);  ",
									"        pm.collectionVariables.set(\"Dietician_Id\",jsonData.id);",
									"       // pm.collectionVariables.set(\"DieticianId\", jsonData.id); ",
									"        pm.collectionVariables.set(\"Dietician_Password\", jsonData.loginPassword); ",
									"    });",
									"",
									"    ",
									"pm.test(\"Body contains string\",() => {",
									"   ",
									"  pm.expect(pm.response.text()).to.include(\"id\");",
									"  pm.expect(pm.response.text()).to.include(\"loginPassword\");",
									"  pm.expect(pm.response.text()).to.include(\"Email\");",
									"",
									"});",
									"",
									"pm.test(\"validate the schemaof dietician using AJV\" ,()=>",
									"{ pm.response.to.have.jsonSchema(schema); ",
									"});",
									"    ",
									"} else if (pm.response.code === 200) {",
									"    pm.test(\"Verify the expected status code is 201\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"}else if (pm.response.code === 401) {",
									"    pm.test(\"Validate status code 401\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									" pm.execution.setNextRequest(\"logout\");",
									"} ",
									"else if (pm.response.code === 400) {",
									"    pm.test(\"Validate status code 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"} else if (pm.response.code === 404) {",
									"    pm.test(\"Validate Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									" pm.execution.setNextRequest(\"logout\");",
									"} else {",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); ",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"error: \"+jsonData.error,()=>{",
									"    console.log(\"Error is: \",jsonData.error);",
									"});}",
									" pm.execution.setNextRequest(\"logout\");",
									"}",
									"",
									"//Validate the header is present or not",
									"pm.test(\"Content-Type header is present\",() =>{",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate the header value",
									"pm.test(\"Content-Type header value is application/json\",()=>{",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000 ms\",()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									" });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ContactNumber\": \"{{PostDietician_ContactNumber}}\",\n  \"DateOfBirth\": \"{{PostDietician_DateOfBirth}}\",\n  \"Education\": \"{{PostDietician_Education}}\",\n  \"Email\": \"{{PostDietician_Email}}\",\n  \"Firstname\": \"{{PostDietician_Firstname}}\",\n  \"HospitalCity\": \"{{PostDietician_Firstname}}\",\n  \"HospitalName\": \"{{PostDietician_HospitalName}}\",\n  \"HospitalPincode\": \"{{PostDietician_HospitalPincode}}\",\n  \"HospitalStreet\": \"{{PostDietician_HospitalStreet}}\",\n  \"Lastname\": \"{{PostDietician_Lastname}}\"\n \n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DietURL}}/dietician",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// status code validation",
									"",
									"var jsonData = pm.response.json(); ",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Verify the expected status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"       res = JSON.parse(responseBody)",
									"value = res.token",
									"console.log(value)",
									"pm.collectionVariables.set(\"Dieticiantoken\",value);",
									"}else if (pm.response.code === 201) {",
									"    pm.test(\"Verify the expected status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    res = JSON.parse(responseBody)",
									"value = res.token",
									"console.log(value)",
									"pm.collectionVariables.set(\"Dieticiantoken\",value);",
									"  ",
									"} else if (pm.response.code === 401) {",
									"    pm.test(\"Validate status code 401\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);  ",
									"});}",
									" pm.execution.setNextRequest(\"Delete Dietician\");",
									"} else if (pm.response.code === 400) {",
									"    pm.test(\"Validate status code 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"",
									"});}",
									"pm.execution.setNextRequest(\"Delete Dietician\");",
									"}else if (pm.response.code === 404) {",
									"    pm.test(\"Validate Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"Delete Dietician\");",
									"} else {",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([500,501,503]); ",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"error: \"+jsonData.error,()=>{",
									"    console.log(\"Error is: \",jsonData.error);    ",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"}",
									"//------------------------------------------------------------",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"password\": \"{{Dietician_Password}}\",\r\n  \"userLoginEmail\": \"{{Dietician_Email}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DietURL}}/login",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "update the dietician id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"Firstname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Lastname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalStreet\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalCity\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalPincode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Education\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"Firstname\",",
									"    \"Lastname\",",
									"    \"ContactNumber\",",
									"    \"DateOfBirth\",",
									"    \"Email\",",
									"    \"HospitalName\",",
									"    \"HospitalStreet\",",
									"    \"HospitalCity\",",
									"    \"HospitalPincode\",",
									"    \"Education\"",
									"  ]",
									"}",
									"",
									"var jsonData = pm.response.json();    ",
									" if (pm.response.code === 200) {",
									"    pm.test(\"Verify the expected status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        pm.collectionVariables.set(\"UpdatedDieticianEmail\", jsonData.Email);  ",
									" ",
									"    });   ",
									"pm.test(\"Body contains string\",() => { ",
									"  pm.expect(pm.response.text()).to.include(\"id\");",
									"});   ",
									"pm.test(\"Schema is valid\",()=>{",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;",
									"});",
									"}",
									"else if (pm.response.code === 201) {",
									"    pm.test(\"Verify the expected status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"} else if (pm.response.code === 401) {",
									"    pm.test(\"Validate status code 401\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"Delete Dietician\");",
									"} else if (pm.response.code === 400) {",
									"    pm.test(\"Validate status code 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"Delete Dietician\");",
									"}else if (pm.response.code === 404) {",
									"    pm.test(\"Validate Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"Delete Dietician\");",
									"} else {",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); ",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"error: \"+jsonData.error,()=>{",
									"    console.log(\"Error is: \",jsonData.error);",
									"});}",
									"pm.execution.setNextRequest(\"Delete Dietician\");",
									"}",
									"",
									"//Validate the header is present or not",
									"pm.test(\"Content-Type header is present\",() =>{",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate the header value",
									"pm.test(\"Content-Type header value is application/json\",()=>{",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000 ms\",()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									" });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ContactNumber\": \"{{PutDietician_ContactNumber}}\",\n  \"DateOfBirth\": \"{{PutDietician_DateOfBirth}}\",\n  \"Education\": \"{{PutDietician_Education}}\",\n  \"Email\": \"{{PutDietician_Email}}\",\n  \"Firstname\": \"{{PutDietician_Firstname}}\",\n  \"HospitalCity\": \"{{PutDietician_HospitalCity}}\",\n  \"HospitalName\": \"{{PutDietician_HospitalName}}\",\n  \"HospitalPincode\": \"{{PutDietician_HospitalPincode}}\",\n  \"HospitalStreet\": \"{{PutDietician_HospitalStreet}}\",\n  \"Lastname\": \"{{PutDietician_Lastname}}\"\n \n}\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DietURL}}/dietician/{{Dietician_Id}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"dietician",
								"{{Dietician_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve information of all dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the Status code",
									"var jsonData = pm.response.json(); ",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Verify the expected status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"  ",
									"}else if (pm.response.code === 201) {",
									"    pm.test(\"Verify the expected status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"} else if (pm.response.code === 401) {",
									"    pm.test(\"Validate status code 401\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"} else if (pm.response.code === 400) {",
									"    pm.test(\"Validate status code 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"}else if (pm.response.code === 404) {",
									"    pm.test(\"Validate Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"} else {",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); ",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"error: \"+jsonData.error,()=>{",
									"    console.log(\"Error is: \",jsonData.error);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"}",
									"",
									"//Validate the header is present or not",
									"pm.test(\"Content-Type header is present\",() =>{",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate the header value",
									"pm.test(\"Content-Type header value is application/json\",()=>{",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"let schema=",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"Firstname\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Lastname\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"ContactNumber\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"DateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Email\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"Firstname\",",
									"        \"Lastname\",",
									"        \"ContactNumber\",",
									"        \"DateOfBirth\",",
									"        \"Email\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"HospitalName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"HospitalStreet\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"HospitalCity\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"HospitalPincode\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Education\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"HospitalName\",",
									"        \"HospitalStreet\",",
									"        \"HospitalCity\",",
									"        \"HospitalPincode\",",
									"        \"Education\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"if (pm.response.code === 200) {",
									"pm.test(\"Schema is valid\",()=>{",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;",
									"});",
									"}",
									" pm.test(\"Response time is less than 3000 ms\",()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									" });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/dietician",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve information by dietician id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"Firstname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Lastname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalStreet\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalCity\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"HospitalPincode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Education\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"Firstname\",",
									"    \"Lastname\",",
									"    \"ContactNumber\",",
									"    \"DateOfBirth\",",
									"    \"Email\",",
									"    \"HospitalName\",",
									"    \"HospitalStreet\",",
									"    \"HospitalCity\",",
									"    \"HospitalPincode\",",
									"    \"Education\"",
									"  ]",
									"}",
									"",
									"//Checking response code",
									"var jsonData = pm.response.json(); ",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Verify the expected status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    console.log(jsonData)",
									"pm.test(\"Body contains string\",() => {",
									"     pm.expect(pm.response.text()).to.include(\"Email\");",
									"  pm.expect(pm.response.text()).to.include(\"id\");",
									"  //pm.expect(pm.response.text()).to.include(\"loginPassword\");",
									"});",
									"pm.test(\"Schema is valid\",()=>{",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;",
									"});",
									"   ",
									"} else if (pm.response.code === 201) {",
									"    pm.test(\"Verify the expected status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"       ",
									"} else if (pm.response.code === 401) {",
									"    pm.test(\"Validate status code 401\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"} else if (pm.response.code === 400) {",
									"    pm.test(\"Validate status code 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"}else if (pm.response.code === 404) {",
									"    pm.test(\"Validate Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"message: \"+jsonData.message,()=>{",
									"    console.log(\"Message is: \",jsonData.message);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"} else {",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); ",
									"    });",
									"    if(jsonData!=null){",
									"    pm.test(\"error: \"+jsonData.error,()=>{",
									"    console.log(\"Error is: \",jsonData.error);",
									"});}",
									"pm.execution.setNextRequest(\"logout\");",
									"}",
									"",
									"//Validate the header is present or not",
									"pm.test(\"Content-Type header is present\",() =>{",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate the header value",
									"pm.test(\"Content-Type header value is application/json\",()=>{",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"",
									"",
									" pm.test(\"Response time is less than 500 ms\",()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									" });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/dietician/{{Dietician_Id}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"dietician",
								"{{Dietician_Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Patientcreation1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"FirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Allergy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FoodPreference\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CuisineCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FileMorbidity\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b1575b2e7ba52578616761\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b1575b2e7ba52578616761\"\r",
									"      ]\r",
									"    },\r",
									"    \"FileMorbidityCondition\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b1575b2e7ba52578616761\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b1575b2e7ba52578616761\"\r",
									"      ]\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DieticianId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Vitals\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b1575b2e7ba52578616761\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b1575b2e7ba52578616761\"\r",
									"      ]\r",
									"    },\r",
									"    \"LastVisitDate\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"patientId\",\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"FileMorbidity\",\r",
									"    \"FileMorbidityCondition\",\r",
									"    \"DateOfBirth\",\r",
									"    \"DieticianId\",\r",
									"    \"Vitals\",\r",
									"    \"LastVisitDate\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									" });\r",
									"res = JSON.parse(responseBody)\r",
									"value = res.patientId\r",
									"console.log(value)\r",
									"pm.collectionVariables.set(\"patientId\", value);\r",
									"\r",
									"value = res.Email\r",
									"console.log(value)\r",
									"pm.collectionVariables.set(\"patientEmail\", value);\r",
									"\r",
									"// Extract the ContactNumber and convert it to a number\r",
									"value = Number(res.ContactNumber);\r",
									"newValue = value + 100;\r",
									"console.log(newValue);\r",
									"pm.collectionVariables.set(\"PatientupdatedConNum\", newValue); \r",
									"    \r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"patientId\");\r",
									"});\r",
									"\r",
									"// pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"// { pm.response.to.have.jsonSchema(schema); \r",
									"// });\r",
									"    \r",
									"}else if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"}\r",
									"\r",
									"//===============================================================================================\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//ContactNumber\r",
									"// const ContactNumber= _.random(2020202020,3434343434)\r",
									"// pm.variables.set(\"PatientContactNumber\",ContactNumber )\r",
									"\r",
									"//DateofBirth\r",
									"// let DateofBirth =_.random(2020,1990)-_.random(01,12)-_.random(01,31)\r",
									"//  pm.variables.set(\"PatientDateofBirth\",DateofBirth)\r",
									"// 1992-05-14\r",
									" \r",
									" //Email\r",
									"// let Email=_.random(2020)+'@domain.com'\r",
									"//  pm.variables.set(\"PatientEmail\",Email)\r",
									"\r",
									"//Firstname\r",
									"/*\r",
									"var Firstname = [\"Sume\", \"Raji\", \"Meena\", \"Kathir\", \"Mullai\", \"Nayan\", \"Sameere\", \"Preethi\", \"Keerthi\", \"Aish\"];\r",
									"var randomIndex = Math.floor(Math.random() * Firstname.length);\r",
									"var randomFirstName = Firstname[randomIndex];\r",
									"console.log(\"Random First Name:\", randomFirstName);\r",
									"pm.environment.set(\"PatientFirstName\", randomFirstName);\r",
									"*/\r",
									"\r",
									"//Allergy\r",
									"//soy, almond, walnut, pistachio, sesame, hazelnut, pecan, cashew, peanut, egg, milk, none\r",
									"var Allergy = [\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"];\r",
									"var randomIndex = Math.floor(Math.random() * Allergy.length);\r",
									"var randomAllergy = Allergy[randomIndex];\r",
									"console.log(\"Random Allergy Name:\", randomAllergy);\r",
									"pm.environment.set(\"PatientAllergy\", randomAllergy);\r",
									"\r",
									"//FoodPreference\r",
									"var FoodPreference = [\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"];\r",
									"var randomIndex = Math.floor(Math.random() * FoodPreference.length);\r",
									"var randomFoodPreference = FoodPreference[randomIndex];\r",
									"console.log(\"Random FoodPreference Name:\", randomFoodPreference);\r",
									"pm.environment.set(\"PatientFoodPreference\", randomFoodPreference);\r",
									"\r",
									"//CuisineCategory\r",
									"var CuisineCategory = [\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"];\r",
									"var randomIndex = Math.floor(Math.random() * CuisineCategory.length);\r",
									"var randomCuisineCategory= CuisineCategory[randomIndex];\r",
									"console.log(\"Random CuisineCategory Name:\", randomCuisineCategory);\r",
									"pm.environment.set(\"PatientCuisineCategory\", randomCuisineCategory);\r",
									"\r",
									"/*//Firstname\r",
									" // Define an array of first names\r",
									"var Firstname = [\"Sume\", \"Raji\", \"Meena\", \"Kathir\", \"Mullai\", \"Nayan\", \"Sameere\", \"Preethi\", \"Keerthi\", \"Aish\"];\r",
									"\r",
									"// Generate a random index to select a name from the array\r",
									"var randomIndex = Math.floor(Math.random() * Firstname.length);\r",
									"\r",
									"// Get the random first name\r",
									"var randomFirstName = Firstname[randomIndex];\r",
									"\r",
									"// Log the random first name to the console\r",
									"console.log(\"Random First Name:\", randomFirstName);\r",
									"\r",
									"// Set the random first name as an environment variable for later use\r",
									"pm.environment.set(\"PatientFirstName\", randomFirstName);*/ \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": " patientInfo",
									"value": "{ \"FirstName\": \"{{FirstName}}\",\n\"LastName\": \"{{LastName}}\",\n\"ContactNumber\": \"{{PatientContactNumber}}\",\n\"Email\": \"{{PatientEmail}}\",\n\"Allergy\": \"{{PatientAllergy}}\",\n\"FoodPreference\": \"{{PatientFoodPreference}}\",\n\"CuisineCategory\":\"{{PatientCuisineCategory}}\",\n\"DateOfBirth\": \"{{PatientDateOfBirth}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef51b31-f8fa-4c40-a429-ea0b7e9f11ed"
								}
							]
						},
						"url": {
							"raw": "{{DietURL}}/patient",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatientupdateByConNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"var  Schema ={\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"FirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Allergy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FoodPreference\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CuisineCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FileMorbidity\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b1575b2e7ba52578616761\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"66b1575c2e7ba52578616767\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"66b1575b2e7ba52578616765\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b1575b2e7ba52578616761\",\r",
									"        \"66b1575c2e7ba52578616767\",\r",
									"        \"66b1575b2e7ba52578616765\"\r",
									"      ]\r",
									"    },\r",
									"    \"FileMorbidityCondition\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b1575b2e7ba52578616761\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"66b1575c2e7ba52578616767\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"66b1575b2e7ba52578616765\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b1575b2e7ba52578616761\",\r",
									"        \"66b1575c2e7ba52578616767\",\r",
									"        \"66b1575b2e7ba52578616765\"\r",
									"      ]\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DieticianId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Vitals\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b1575b2e7ba52578616761\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b1575b2e7ba52578616761\"\r",
									"      ]\r",
									"    },\r",
									"    \"LastVisitDate\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"patientId\",\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"FileMorbidity\",\r",
									"    \"FileMorbidityCondition\",\r",
									"    \"DateOfBirth\",\r",
									"    \"DieticianId\",\r",
									"    \"Vitals\",\r",
									"    \"LastVisitDate\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"pm.test(\"Body contains integer\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"patientId\");\r",
									"});\r",
									"\r",
									"// pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"// { pm.response.to.have.jsonSchema(Schema); \r",
									"// });\r",
									"} else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"}else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": " patientInfo",
									"value": "{\n\"FirstName\": \"{{PutPatient_FirstName}}\",\n\"LastName\": \"{{PutPatient_LastName}}\",\n\"ContactNumber\": \"{{PutPatient_ContactNumber}}\",\n\"Email\": \"{{PutPatient_Email}}\",\n\"Allergy\": \"{{PutPatient_Allergy}}\",\n\"FoodPreference\": \"{{PutPatient_FoodPreference}}\",\n\"CuisineCategory\": \"{{PutPatient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{PutPatient_DateOfBirth}}\",\n\"patientId\": \"{{patientId}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "i_0bSw09j/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{DietURL}}/patient/{{patientId}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patientupdate_addvitals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"FirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Allergy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FoodPreference\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CuisineCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FileMorbidity\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b021bba2b35b78f82f7bbe\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"66b021baa2b35b78f82f7bba\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"66b021bba2b35b78f82f7bbc\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b021bba2b35b78f82f7bbe\",\r",
									"        \"66b021baa2b35b78f82f7bba\",\r",
									"        \"66b021bba2b35b78f82f7bbc\"\r",
									"      ]\r",
									"    },\r",
									"    \"FileMorbidityCondition\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b021bba2b35b78f82f7bbe\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"66b021baa2b35b78f82f7bba\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"66b021bba2b35b78f82f7bbc\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b021bba2b35b78f82f7bbe\",\r",
									"        \"66b021baa2b35b78f82f7bba\",\r",
									"        \"66b021bba2b35b78f82f7bbc\"\r",
									"      ]\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DieticianId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Vitals\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66b021baa2b35b78f82f7bba\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66b021baa2b35b78f82f7bba\"\r",
									"      ]\r",
									"    },\r",
									"    \"LastVisitDate\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"patientId\",\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"FileMorbidity\",\r",
									"    \"FileMorbidityCondition\",\r",
									"    \"DateOfBirth\",\r",
									"    \"DieticianId\",\r",
									"    \"Vitals\",\r",
									"    \"LastVisitDate\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"patientId\");\r",
									"});\r",
									"\r",
									"// pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"// { pm.response.to.have.jsonSchema(Schema); \r",
									"// });\r",
									"} else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"}else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": " patientInfo",
									"value": "{\n\"FirstName\": \"{{PutPatient_FirstName}}\",\n\"LastName\": \"{{PutPatient_LastName}}\",\n\"ContactNumber\": \"{{PutPatient_ContactNumber}}\",\n\"Email\": \"{{PutPatient_Email}}\",\n\"Allergy\": \"{{PutPatient_Allergy}}\",\n\"FoodPreference\": \"{{PutPatient_FoodPreference}}\",\n\"CuisineCategory\": \"{{PutPatient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{PutPatient_DateOfBirth}}\",\n\"patientId\": \"{{patientId}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef51b30-8334-4bb0-946e-21610c53811f"
								},
								{
									"key": "vitals",
									"value": " {\n       “Weight“ : {{weight}},\n       “Height” : {{height}}\n        “Temperature” : {{temperature}},\n        “SP” : {{sp}},\n        “DP” : {{dp}}\n \n             \t}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{DietURL}}/patient/{{patientId}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "testreport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"fileId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"fileName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"uploadDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidConditions\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"morbidConditionStr\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"fileId\",\r",
									"        \"fileName\",\r",
									"        \"uploadDate\",\r",
									"        \"morbidConditions\",\r",
									"        \"morbidConditionStr\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"// pm.test('validate the schemaof dietician using AJV' ,()=>\r",
									"// { pm.response.to.have.jsonSchema(Schema); });\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"// Parse the response body\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Extract the fileIds\r",
									"let fileIds = responseBody.map(item => item.fileId);\r",
									"\r",
									"// Select one fileId (e.g., the first one)\r",
									"let selectedFileId = fileIds[0];\r",
									"\r",
									"// Save the selected fileId to an environment variable\r",
									"pm.collectionVariables.set(\"fileId\", selectedFileId);\r",
									"\r",
									"// Log the selected fileId to the Postman console\r",
									"console.log(\"Selected fileId:\", selectedFileId);\r",
									"\r",
									"//other validation\r",
									"pm.test(\"Body contains integer\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"fileId\");\r",
									"});\r",
									"// pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"// { pm.response.to.have.jsonSchema(Schema); \r",
									"// });\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 600ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/patient/testReports/{{patientId}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getallpatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"patientId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"FirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"LastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Allergy\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"FoodPreference\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"CuisineCategory\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"FileMorbidity\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"66b1575b2e7ba52578616761\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"T3\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"T4\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"TSH\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"T3\",\r",
									"                \"T4\",\r",
									"                \"TSH\"\r",
									"              ]\r",
									"            },\r",
									"            \"66b1575c2e7ba52578616767\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"T3\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"T4\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"TSH\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"T3\",\r",
									"                \"T4\",\r",
									"                \"TSH\"\r",
									"              ]\r",
									"            },\r",
									"            \"66b1575b2e7ba52578616765\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"T4\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"TSH\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"T4\",\r",
									"                \"TSH\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"66b1575b2e7ba52578616761\",\r",
									"            \"66b1575c2e7ba52578616767\",\r",
									"            \"66b1575b2e7ba52578616765\"\r",
									"          ]\r",
									"        },\r",
									"        \"FileMorbidityCondition\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"66b1575b2e7ba52578616761\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"66b1575c2e7ba52578616767\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"66b1575b2e7ba52578616765\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"66b1575b2e7ba52578616761\",\r",
									"            \"66b1575c2e7ba52578616767\",\r",
									"            \"66b1575b2e7ba52578616765\"\r",
									"          ]\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DieticianId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Vitals\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"66b1575b2e7ba52578616761\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"Weight\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"Height\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"Temperature\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"SP\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"DP\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"Weight\",\r",
									"                \"Height\",\r",
									"                \"Temperature\",\r",
									"                \"SP\",\r",
									"                \"DP\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"66b1575b2e7ba52578616761\"\r",
									"          ]\r",
									"        },\r",
									"        \"LastVisitDate\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"patientId\",\r",
									"        \"FirstName\",\r",
									"        \"LastName\",\r",
									"        \"ContactNumber\",\r",
									"        \"Email\",\r",
									"        \"Allergy\",\r",
									"        \"FoodPreference\",\r",
									"        \"CuisineCategory\",\r",
									"        \"FileMorbidity\",\r",
									"        \"FileMorbidityCondition\",\r",
									"        \"DateOfBirth\",\r",
									"        \"DieticianId\",\r",
									"        \"Vitals\",\r",
									"        \"LastVisitDate\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"// pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"// { pm.response.to.have.jsonSchema(Schema); \r",
									"// });\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/patient",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "byfileId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"     pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"   pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"     pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/pdf\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/patient/testReports/viewFile/{{fileId}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								"{{fileId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patienttoken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"// status code validation\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Body contains integer\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"       res = JSON.parse(responseBody)\r",
									"value = res.token\r",
									"console.log(value)\r",
									"pm.collectionVariables.set(\"PatientToken\",value);\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    res = JSON.parse(responseBody)\r",
									"value = res.token\r",
									"console.log(value)\r",
									"pm.collectionVariables.set(\"PatientToken\",value);\r",
									"\r",
									"pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"{ pm.response.to.have.jsonSchema(Schema); \r",
									"});\r",
									"  \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);  \r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"}else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500,501,503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);    \r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"//------------------------------------------------------------\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"{{patientEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DietURL}}/login",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "Allmorbidity_Dieticiantoken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityMarkerMaxVal\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"{ pm.response.to.have.jsonSchema(Schema); \r",
									"});\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/morbidity",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "AllMorbidity_Admintoken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityMarkerMaxVal\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"{ pm.response.to.have.jsonSchema(Schema); \r",
									"});\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/morbidity",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Noauth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/morbidity",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "patienttoken_negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Patienttoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/morbidity",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "testnameMor_Admintoken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityMarkerMaxVal\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"{ pm.response.to.have.jsonSchema(Schema); \r",
									"});\r",
									"\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DietURL}}/morbidity/Fasting Glucose",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidity",
								"Fasting Glucose"
							]
						}
					},
					"response": []
				},
				{
					"name": "testnameMor_Dieticiantoken Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//JSON Schema Validation\r",
									"\r",
									"var  Schema ={\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityMarkerMaxVal\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									";\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"pm.test(\"validate the schemaof dietician using AJV\" ,()=>\r",
									"{ pm.response.to.have.jsonSchema(Schema); \r",
									"})\r",
									"\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/morbidity/Fasting Glucose",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidity",
								"Fasting Glucose"
							]
						}
					},
					"response": []
				},
				{
					"name": "Noauth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DietURL}}/morbidit",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient token_Nagative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); \r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"PatientId\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"error: \"+jsonData.error,()=>{\r",
									"    console.log(\"Error is: \",jsonData.error);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"PatientId\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Patienttoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/morbidity/Fasting Glucose",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"morbidity",
								"Fasting Glucose"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "PatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    \r",
									" pm.execution.setNextRequest(\"Delete Dietician\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dieticiantoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/patient/{{patientId}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									" pm.execution.setNextRequest(\"logout\");\r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"logout\");\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"    var jsonData = pm.response.json(); \r",
									"    if(jsonData!=null){\r",
									"    pm.test(\"message: \"+jsonData.message,()=>{\r",
									"    console.log(\"Message is: \",jsonData.message);\r",
									"});}\r",
									"pm.execution.setNextRequest(\"logout\");\r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"    \r",
									" pm.execution.setNextRequest(\"logout\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/dietician/{{Dietician_Id}}",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"dietician",
								"{{Dietician_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"}else if (pm.response.code === 201) {\r",
									"    pm.test(\"Verify the expected status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validate status code 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"   \r",
									"} \r",
									"else if (pm.response.code === 400) {\r",
									"    pm.test(\"Validate status code 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"    \r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Validate Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"   \r",
									"} else {\r",
									"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([500, 503]); \r",
									"    });\r",
									"   \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DietURL}}/logoutdietician",
							"host": [
								"{{DietURL}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "DietURL",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "Admintoken",
			"value": ""
		},
		{
			"key": "Dietician_Email",
			"value": ""
		},
		{
			"key": "Dietician_Id",
			"value": ""
		},
		{
			"key": "Dietician_Password",
			"value": ""
		},
		{
			"key": "Dieticiantoken",
			"value": ""
		},
		{
			"key": "UpdatedDieticianEmail",
			"value": ""
		},
		{
			"key": "DieticianEmail",
			"value": ""
		},
		{
			"key": "DieticianId",
			"value": ""
		},
		{
			"key": "loginPassword",
			"value": ""
		},
		{
			"key": "patientId",
			"value": ""
		},
		{
			"key": "patientEmail",
			"value": ""
		},
		{
			"key": "PatientupdatedConNum",
			"value": ""
		},
		{
			"key": "fileId",
			"value": ""
		}
	]
}